/*
 * generated by Xtext
 */
package at.ac.tuwien.big.views.view.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ViewGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ViewModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cViewGroupsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cViewGroupsViewGroupParserRuleCall_0_0 = (RuleCall)cViewGroupsAssignment_0.eContents().get(0);
		private final Assignment cViewGroupsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cViewGroupsViewGroupParserRuleCall_1_0 = (RuleCall)cViewGroupsAssignment_1.eContents().get(0);
		
		//// Our grammar is implemented as follows
		//ViewModel:
		//	(viewGroups+=ViewGroup viewGroups+=ViewGroup*)?;
		@Override public ParserRule getRule() { return rule; }

		//(viewGroups+=ViewGroup viewGroups+=ViewGroup*)?
		public Group getGroup() { return cGroup; }

		//viewGroups+=ViewGroup
		public Assignment getViewGroupsAssignment_0() { return cViewGroupsAssignment_0; }

		//ViewGroup
		public RuleCall getViewGroupsViewGroupParserRuleCall_0_0() { return cViewGroupsViewGroupParserRuleCall_0_0; }

		//viewGroups+=ViewGroup*
		public Assignment getViewGroupsAssignment_1() { return cViewGroupsAssignment_1; }

		//ViewGroup
		public RuleCall getViewGroupsViewGroupParserRuleCall_1_0() { return cViewGroupsViewGroupParserRuleCall_1_0; }
	}

	public class ViewGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWelcomeViewGroupAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cWelcomeViewGroupWelcomeKeyword_0_0 = (Keyword)cWelcomeViewGroupAssignment_0.eContents().get(0);
		private final Keyword cViewgroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cViewsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cViewsViewParserRuleCall_4_0_0 = (RuleCall)cViewsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cViewsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cViewsViewParserRuleCall_4_1_1_0 = (RuleCall)cViewsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ViewGroup:
		//	welcomeViewGroup?="welcome"? "viewgroup" name=ID "{" (views+=View ("," views+=View)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//welcomeViewGroup?="welcome"? "viewgroup" name=ID "{" (views+=View ("," views+=View)*)? "}"
		public Group getGroup() { return cGroup; }

		//welcomeViewGroup?="welcome"?
		public Assignment getWelcomeViewGroupAssignment_0() { return cWelcomeViewGroupAssignment_0; }

		//"welcome"
		public Keyword getWelcomeViewGroupWelcomeKeyword_0_0() { return cWelcomeViewGroupWelcomeKeyword_0_0; }

		//"viewgroup"
		public Keyword getViewgroupKeyword_1() { return cViewgroupKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(views+=View ("," views+=View)*)?
		public Group getGroup_4() { return cGroup_4; }

		//views+=View
		public Assignment getViewsAssignment_4_0() { return cViewsAssignment_4_0; }

		//View
		public RuleCall getViewsViewParserRuleCall_4_0_0() { return cViewsViewParserRuleCall_4_0_0; }

		//("," views+=View)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//views+=View
		public Assignment getViewsAssignment_4_1_1() { return cViewsAssignment_4_1_1; }

		//View
		public RuleCall getViewsViewParserRuleCall_4_1_1_0() { return cViewsViewParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassIndexViewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassOperationViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//View:
		//	ClassIndexView | ClassOperationView;
		@Override public ParserRule getRule() { return rule; }

		//ClassIndexView | ClassOperationView
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassIndexView
		public RuleCall getClassIndexViewParserRuleCall_0() { return cClassIndexViewParserRuleCall_0; }

		//ClassOperationView
		public RuleCall getClassOperationViewParserRuleCall_1() { return cClassOperationViewParserRuleCall_1; }
	}

	public class ClassIndexViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassIndexView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartViewAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStartViewStartKeyword_0_0 = (Keyword)cStartViewAssignment_0.eContents().get(0);
		private final Keyword cIndexViewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cHeaderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_3_0 = (RuleCall)cHeaderAssignment_3.eContents().get(0);
		private final Keyword cHandlesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClassAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cClassClassCrossReference_5_0 = (CrossReference)cClassAssignment_5.eContents().get(0);
		private final RuleCall cClassClassQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cClassClassCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cViewDescriptionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDescriptionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cDescriptionAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cLinkAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_8_0_0 = (RuleCall)cLinkAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cLinkAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_8_1_1_0 = (RuleCall)cLinkAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ClassIndexView:
		//	startView?="start"? "index-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{" ("view-description"
		//	description=STRING)? (link+=Link ("," link+=Link)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//startView?="start"? "index-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{" ("view-description"
		//description=STRING)? (link+=Link ("," link+=Link)*)? "}"
		public Group getGroup() { return cGroup; }

		//startView?="start"?
		public Assignment getStartViewAssignment_0() { return cStartViewAssignment_0; }

		//"start"
		public Keyword getStartViewStartKeyword_0_0() { return cStartViewStartKeyword_0_0; }

		//"index-view"
		public Keyword getIndexViewKeyword_1() { return cIndexViewKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//header=STRING
		public Assignment getHeaderAssignment_3() { return cHeaderAssignment_3; }

		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_3_0() { return cHeaderSTRINGTerminalRuleCall_3_0; }

		//"handles"
		public Keyword getHandlesKeyword_4() { return cHandlesKeyword_4; }

		//class=[Class|QualifiedName]
		public Assignment getClassAssignment_5() { return cClassAssignment_5; }

		//[Class|QualifiedName]
		public CrossReference getClassClassCrossReference_5_0() { return cClassClassCrossReference_5_0; }

		//QualifiedName
		public RuleCall getClassClassQualifiedNameParserRuleCall_5_0_1() { return cClassClassQualifiedNameParserRuleCall_5_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//("view-description" description=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"view-description"
		public Keyword getViewDescriptionKeyword_7_0() { return cViewDescriptionKeyword_7_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_7_1() { return cDescriptionAssignment_7_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_7_1_0() { return cDescriptionSTRINGTerminalRuleCall_7_1_0; }

		//(link+=Link ("," link+=Link)*)?
		public Group getGroup_8() { return cGroup_8; }

		//link+=Link
		public Assignment getLinkAssignment_8_0() { return cLinkAssignment_8_0; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_8_0_0() { return cLinkLinkParserRuleCall_8_0_0; }

		//("," link+=Link)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//link+=Link
		public Assignment getLinkAssignment_8_1_1() { return cLinkAssignment_8_1_1; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_8_1_1_0() { return cLinkLinkParserRuleCall_8_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ClassOperationViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassOperationView");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateViewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReadViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUpdateViewParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeleteViewParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ClassOperationView:
		//	CreateView | ReadView | UpdateView | DeleteView;
		@Override public ParserRule getRule() { return rule; }

		//CreateView | ReadView | UpdateView | DeleteView
		public Alternatives getAlternatives() { return cAlternatives; }

		//CreateView
		public RuleCall getCreateViewParserRuleCall_0() { return cCreateViewParserRuleCall_0; }

		//ReadView
		public RuleCall getReadViewParserRuleCall_1() { return cReadViewParserRuleCall_1; }

		//UpdateView
		public RuleCall getUpdateViewParserRuleCall_2() { return cUpdateViewParserRuleCall_2; }

		//DeleteView
		public RuleCall getDeleteViewParserRuleCall_3() { return cDeleteViewParserRuleCall_3; }
	}

	public class CreateViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreateView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayoutLayoutParserRuleCall_0_0 = (RuleCall)cLayoutAssignment_0.eContents().get(0);
		private final Assignment cStartViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStartViewStartKeyword_1_0 = (Keyword)cStartViewAssignment_1.eContents().get(0);
		private final Keyword cCreateViewKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cHeaderAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_4_0 = (RuleCall)cHeaderAssignment_4.eContents().get(0);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClassAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cClassClassCrossReference_6_0 = (CrossReference)cClassAssignment_6.eContents().get(0);
		private final RuleCall cClassClassQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cClassClassCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cViewDescriptionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDescriptionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cDescriptionAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cElementGroupsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_0_0 = (RuleCall)cElementGroupsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cElementGroupsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_1_1_0 = (RuleCall)cElementGroupsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CreateView:
		//	layout=Layout startView?="start"? "create-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//layout=Layout startView?="start"? "create-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}"
		public Group getGroup() { return cGroup; }

		//layout=Layout
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_0_0() { return cLayoutLayoutParserRuleCall_0_0; }

		//startView?="start"?
		public Assignment getStartViewAssignment_1() { return cStartViewAssignment_1; }

		//"start"
		public Keyword getStartViewStartKeyword_1_0() { return cStartViewStartKeyword_1_0; }

		//"create-view"
		public Keyword getCreateViewKeyword_2() { return cCreateViewKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//header=STRING
		public Assignment getHeaderAssignment_4() { return cHeaderAssignment_4; }

		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_4_0() { return cHeaderSTRINGTerminalRuleCall_4_0; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//class=[Class|QualifiedName]
		public Assignment getClassAssignment_6() { return cClassAssignment_6; }

		//[Class|QualifiedName]
		public CrossReference getClassClassCrossReference_6_0() { return cClassClassCrossReference_6_0; }

		//QualifiedName
		public RuleCall getClassClassQualifiedNameParserRuleCall_6_0_1() { return cClassClassQualifiedNameParserRuleCall_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//("view-description" description=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//"view-description"
		public Keyword getViewDescriptionKeyword_8_0() { return cViewDescriptionKeyword_8_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_8_1() { return cDescriptionAssignment_8_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_1_0() { return cDescriptionSTRINGTerminalRuleCall_8_1_0; }

		//(elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)?
		public Group getGroup_9() { return cGroup_9; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_0() { return cElementGroupsAssignment_9_0; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_0_0() { return cElementGroupsElementGroupParserRuleCall_9_0_0; }

		//("," elementGroups+=ElementGroup)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_1_1() { return cElementGroupsAssignment_9_1_1; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_1_1_0() { return cElementGroupsElementGroupParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ReadViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReadView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayoutLayoutParserRuleCall_0_0 = (RuleCall)cLayoutAssignment_0.eContents().get(0);
		private final Assignment cStartViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStartViewStartKeyword_1_0 = (Keyword)cStartViewAssignment_1.eContents().get(0);
		private final Keyword cReadViewKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cHeaderAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_4_0 = (RuleCall)cHeaderAssignment_4.eContents().get(0);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClassAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cClassClassCrossReference_6_0 = (CrossReference)cClassAssignment_6.eContents().get(0);
		private final RuleCall cClassClassQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cClassClassCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cViewDescriptionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDescriptionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cDescriptionAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cElementGroupsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_0_0 = (RuleCall)cElementGroupsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cElementGroupsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_1_1_0 = (RuleCall)cElementGroupsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ReadView:
		//	layout=Layout startView?="start"? "read-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//layout=Layout startView?="start"? "read-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}"
		public Group getGroup() { return cGroup; }

		//layout=Layout
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_0_0() { return cLayoutLayoutParserRuleCall_0_0; }

		//startView?="start"?
		public Assignment getStartViewAssignment_1() { return cStartViewAssignment_1; }

		//"start"
		public Keyword getStartViewStartKeyword_1_0() { return cStartViewStartKeyword_1_0; }

		//"read-view"
		public Keyword getReadViewKeyword_2() { return cReadViewKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//header=STRING
		public Assignment getHeaderAssignment_4() { return cHeaderAssignment_4; }

		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_4_0() { return cHeaderSTRINGTerminalRuleCall_4_0; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//class=[Class|QualifiedName]
		public Assignment getClassAssignment_6() { return cClassAssignment_6; }

		//[Class|QualifiedName]
		public CrossReference getClassClassCrossReference_6_0() { return cClassClassCrossReference_6_0; }

		//QualifiedName
		public RuleCall getClassClassQualifiedNameParserRuleCall_6_0_1() { return cClassClassQualifiedNameParserRuleCall_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//("view-description" description=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//"view-description"
		public Keyword getViewDescriptionKeyword_8_0() { return cViewDescriptionKeyword_8_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_8_1() { return cDescriptionAssignment_8_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_1_0() { return cDescriptionSTRINGTerminalRuleCall_8_1_0; }

		//(elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)?
		public Group getGroup_9() { return cGroup_9; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_0() { return cElementGroupsAssignment_9_0; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_0_0() { return cElementGroupsElementGroupParserRuleCall_9_0_0; }

		//("," elementGroups+=ElementGroup)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_1_1() { return cElementGroupsAssignment_9_1_1; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_1_1_0() { return cElementGroupsElementGroupParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class UpdateViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayoutLayoutParserRuleCall_0_0 = (RuleCall)cLayoutAssignment_0.eContents().get(0);
		private final Assignment cStartViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStartViewStartKeyword_1_0 = (Keyword)cStartViewAssignment_1.eContents().get(0);
		private final Keyword cUpdateViewKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cHeaderAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_4_0 = (RuleCall)cHeaderAssignment_4.eContents().get(0);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClassAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cClassClassCrossReference_6_0 = (CrossReference)cClassAssignment_6.eContents().get(0);
		private final RuleCall cClassClassQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cClassClassCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cViewDescriptionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDescriptionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cDescriptionAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cElementGroupsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_0_0 = (RuleCall)cElementGroupsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cElementGroupsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_1_1_0 = (RuleCall)cElementGroupsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//UpdateView:
		//	layout=Layout startView?="start"? "update-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//layout=Layout startView?="start"? "update-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}"
		public Group getGroup() { return cGroup; }

		//layout=Layout
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_0_0() { return cLayoutLayoutParserRuleCall_0_0; }

		//startView?="start"?
		public Assignment getStartViewAssignment_1() { return cStartViewAssignment_1; }

		//"start"
		public Keyword getStartViewStartKeyword_1_0() { return cStartViewStartKeyword_1_0; }

		//"update-view"
		public Keyword getUpdateViewKeyword_2() { return cUpdateViewKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//header=STRING
		public Assignment getHeaderAssignment_4() { return cHeaderAssignment_4; }

		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_4_0() { return cHeaderSTRINGTerminalRuleCall_4_0; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//class=[Class|QualifiedName]
		public Assignment getClassAssignment_6() { return cClassAssignment_6; }

		//[Class|QualifiedName]
		public CrossReference getClassClassCrossReference_6_0() { return cClassClassCrossReference_6_0; }

		//QualifiedName
		public RuleCall getClassClassQualifiedNameParserRuleCall_6_0_1() { return cClassClassQualifiedNameParserRuleCall_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//("view-description" description=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//"view-description"
		public Keyword getViewDescriptionKeyword_8_0() { return cViewDescriptionKeyword_8_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_8_1() { return cDescriptionAssignment_8_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_1_0() { return cDescriptionSTRINGTerminalRuleCall_8_1_0; }

		//(elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)?
		public Group getGroup_9() { return cGroup_9; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_0() { return cElementGroupsAssignment_9_0; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_0_0() { return cElementGroupsElementGroupParserRuleCall_9_0_0; }

		//("," elementGroups+=ElementGroup)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_1_1() { return cElementGroupsAssignment_9_1_1; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_1_1_0() { return cElementGroupsElementGroupParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class DeleteViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeleteView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayoutLayoutParserRuleCall_0_0 = (RuleCall)cLayoutAssignment_0.eContents().get(0);
		private final Assignment cStartViewAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStartViewStartKeyword_1_0 = (Keyword)cStartViewAssignment_1.eContents().get(0);
		private final Keyword cDeleteViewKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cHeaderAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_4_0 = (RuleCall)cHeaderAssignment_4.eContents().get(0);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClassAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cClassClassCrossReference_6_0 = (CrossReference)cClassAssignment_6.eContents().get(0);
		private final RuleCall cClassClassQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cClassClassCrossReference_6_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cViewDescriptionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDescriptionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cDescriptionAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cElementGroupsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_0_0 = (RuleCall)cElementGroupsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cElementGroupsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cElementGroupsElementGroupParserRuleCall_9_1_1_0 = (RuleCall)cElementGroupsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//DeleteView:
		//	layout=Layout startView?="start"? "delete-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//layout=Layout startView?="start"? "delete-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
		//("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}"
		public Group getGroup() { return cGroup; }

		//layout=Layout
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_0_0() { return cLayoutLayoutParserRuleCall_0_0; }

		//startView?="start"?
		public Assignment getStartViewAssignment_1() { return cStartViewAssignment_1; }

		//"start"
		public Keyword getStartViewStartKeyword_1_0() { return cStartViewStartKeyword_1_0; }

		//"delete-view"
		public Keyword getDeleteViewKeyword_2() { return cDeleteViewKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//header=STRING
		public Assignment getHeaderAssignment_4() { return cHeaderAssignment_4; }

		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_4_0() { return cHeaderSTRINGTerminalRuleCall_4_0; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//class=[Class|QualifiedName]
		public Assignment getClassAssignment_6() { return cClassAssignment_6; }

		//[Class|QualifiedName]
		public CrossReference getClassClassCrossReference_6_0() { return cClassClassCrossReference_6_0; }

		//QualifiedName
		public RuleCall getClassClassQualifiedNameParserRuleCall_6_0_1() { return cClassClassQualifiedNameParserRuleCall_6_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//("view-description" description=STRING)?
		public Group getGroup_8() { return cGroup_8; }

		//"view-description"
		public Keyword getViewDescriptionKeyword_8_0() { return cViewDescriptionKeyword_8_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_8_1() { return cDescriptionAssignment_8_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_1_0() { return cDescriptionSTRINGTerminalRuleCall_8_1_0; }

		//(elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)?
		public Group getGroup_9() { return cGroup_9; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_0() { return cElementGroupsAssignment_9_0; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_0_0() { return cElementGroupsElementGroupParserRuleCall_9_0_0; }

		//("," elementGroups+=ElementGroup)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//elementGroups+=ElementGroup
		public Assignment getElementGroupsAssignment_9_1_1() { return cElementGroupsAssignment_9_1_1; }

		//ElementGroup
		public RuleCall getElementGroupsElementGroupParserRuleCall_9_1_1_0() { return cElementGroupsElementGroupParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ConditionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementGroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cViewElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////cp: ich glaub nicht das die in irgendeiner weise zieht
		////weils in keiner regel vorkommt. 
		//ConditionalElement:
		//	ElementGroup | ViewElement;
		@Override public ParserRule getRule() { return rule; }

		//ElementGroup | ViewElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ElementGroup
		public RuleCall getElementGroupParserRuleCall_0() { return cElementGroupParserRuleCall_0; }

		//ViewElement
		public RuleCall getViewElementParserRuleCall_1() { return cViewElementParserRuleCall_1; }
	}

	public class ElementGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLayoutAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLayoutLayoutParserRuleCall_0_0 = (RuleCall)cLayoutAssignment_0.eContents().get(0);
		private final Keyword cElementgroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHeaderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeaderSTRINGTerminalRuleCall_2_0 = (RuleCall)cHeaderAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cViewElementsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cViewElementsViewElementParserRuleCall_4_0_0 = (RuleCall)cViewElementsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cViewElementsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cViewElementsViewElementParserRuleCall_4_1_1_0 = (RuleCall)cViewElementsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConditionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_6_1_0 = (RuleCall)cConditionAssignment_6_1.eContents().get(0);
		
		//ElementGroup:
		//	layout=Layout "elementgroup" header=STRING "{" (viewElements+=ViewElement ("," viewElements+=ViewElement)*)? "}"
		//	("with" condition=Condition)?;
		@Override public ParserRule getRule() { return rule; }

		//layout=Layout "elementgroup" header=STRING "{" (viewElements+=ViewElement ("," viewElements+=ViewElement)*)? "}" ("with"
		//condition=Condition)?
		public Group getGroup() { return cGroup; }

		//layout=Layout
		public Assignment getLayoutAssignment_0() { return cLayoutAssignment_0; }

		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_0_0() { return cLayoutLayoutParserRuleCall_0_0; }

		//"elementgroup"
		public Keyword getElementgroupKeyword_1() { return cElementgroupKeyword_1; }

		//header=STRING
		public Assignment getHeaderAssignment_2() { return cHeaderAssignment_2; }

		//STRING
		public RuleCall getHeaderSTRINGTerminalRuleCall_2_0() { return cHeaderSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(viewElements+=ViewElement ("," viewElements+=ViewElement)*)?
		public Group getGroup_4() { return cGroup_4; }

		//viewElements+=ViewElement
		public Assignment getViewElementsAssignment_4_0() { return cViewElementsAssignment_4_0; }

		//ViewElement
		public RuleCall getViewElementsViewElementParserRuleCall_4_0_0() { return cViewElementsViewElementParserRuleCall_4_0_0; }

		//("," viewElements+=ViewElement)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//viewElements+=ViewElement
		public Assignment getViewElementsAssignment_4_1_1() { return cViewElementsAssignment_4_1_1; }

		//ViewElement
		public RuleCall getViewElementsViewElementParserRuleCall_4_1_1_0() { return cViewElementsViewElementParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//("with" condition=Condition)?
		public Group getGroup_6() { return cGroup_6; }

		//"with"
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//condition=Condition
		public Assignment getConditionAssignment_6_1() { return cConditionAssignment_6_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_6_1_0() { return cConditionConditionParserRuleCall_6_1_0; }
	}

	public class ViewElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAssociationElementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cPropertyElementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		
		//ViewElement:
		//	(AssociationElement | PropertyElement) ("with" condition=Condition)?;
		@Override public ParserRule getRule() { return rule; }

		//(AssociationElement | PropertyElement) ("with" condition=Condition)?
		public Group getGroup() { return cGroup; }

		//AssociationElement | PropertyElement
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//AssociationElement
		public RuleCall getAssociationElementParserRuleCall_0_0() { return cAssociationElementParserRuleCall_0_0; }

		//PropertyElement
		public RuleCall getPropertyElementParserRuleCall_0_1() { return cPropertyElementParserRuleCall_0_1; }

		//("with" condition=Condition)?
		public Group getGroup_1() { return cGroup_1; }

		//"with"
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }

		//condition=Condition
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_1_0() { return cConditionConditionParserRuleCall_1_1_0; }
	}

	public class AssociationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssociationElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AssociationElement:
		//	Table | List;
		@Override public ParserRule getRule() { return rule; }

		//Table | List
		public Alternatives getAlternatives() { return cAlternatives; }

		//Table
		public RuleCall getTableParserRuleCall_0() { return cTableParserRuleCall_0; }

		//List
		public RuleCall getListParserRuleCall_1() { return cListParserRuleCall_1; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cHandlesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAssociationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAssociationAssociationCrossReference_4_0 = (CrossReference)cAssociationAssignment_4.eContents().get(0);
		private final RuleCall cAssociationAssociationQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cAssociationAssociationCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cLinkAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_6_0_0 = (RuleCall)cLinkAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cLinkAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_6_1_1_0 = (RuleCall)cLinkAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//List:
		//	"list" elementID=ID label=STRING "handles" association=[Association|QualifiedName] "{" (link+=Link (","
		//	link+=Link)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"list" elementID=ID label=STRING "handles" association=[Association|QualifiedName] "{" (link+=Link ("," link+=Link)*)?
		//"}"
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//"handles"
		public Keyword getHandlesKeyword_3() { return cHandlesKeyword_3; }

		//association=[Association|QualifiedName]
		public Assignment getAssociationAssignment_4() { return cAssociationAssignment_4; }

		//[Association|QualifiedName]
		public CrossReference getAssociationAssociationCrossReference_4_0() { return cAssociationAssociationCrossReference_4_0; }

		//QualifiedName
		public RuleCall getAssociationAssociationQualifiedNameParserRuleCall_4_0_1() { return cAssociationAssociationQualifiedNameParserRuleCall_4_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(link+=Link ("," link+=Link)*)?
		public Group getGroup_6() { return cGroup_6; }

		//link+=Link
		public Assignment getLinkAssignment_6_0() { return cLinkAssignment_6_0; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_6_0_0() { return cLinkLinkParserRuleCall_6_0_0; }

		//("," link+=Link)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//link+=Link
		public Assignment getLinkAssignment_6_1_1() { return cLinkAssignment_6_1_1; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_6_1_1_0() { return cLinkLinkParserRuleCall_6_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cHandlesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAssociationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAssociationAssociationCrossReference_4_0 = (CrossReference)cAssociationAssignment_4.eContents().get(0);
		private final RuleCall cAssociationAssociationQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cAssociationAssociationCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Assignment cLinkAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_6_0_0_0 = (RuleCall)cLinkAssignment_6_0_0.eContents().get(0);
		private final Group cGroup_6_0_1 = (Group)cGroup_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_6_0_1_0 = (Keyword)cGroup_6_0_1.eContents().get(0);
		private final Assignment cLinkAssignment_6_0_1_1 = (Assignment)cGroup_6_0_1.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_6_0_1_1_0 = (RuleCall)cLinkAssignment_6_0_1_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cGroup_6_1.eContents().get(0);
		private final Assignment cLinkAssignment_6_1_0_0 = (Assignment)cGroup_6_1_0.eContents().get(0);
		private final RuleCall cLinkLinkParserRuleCall_6_1_0_0_0 = (RuleCall)cLinkAssignment_6_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_6_1_0_1 = (Keyword)cGroup_6_1_0.eContents().get(1);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Assignment cColumnsAssignment_6_1_1_0 = (Assignment)cGroup_6_1_1.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_6_1_1_0_0 = (RuleCall)cColumnsAssignment_6_1_1_0.eContents().get(0);
		private final Group cGroup_6_1_1_1 = (Group)cGroup_6_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_1_0 = (Keyword)cGroup_6_1_1_1.eContents().get(0);
		private final Assignment cColumnsAssignment_6_1_1_1_1 = (Assignment)cGroup_6_1_1_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_6_1_1_1_1_0 = (RuleCall)cColumnsAssignment_6_1_1_1_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cAlternatives_6.eContents().get(2);
		private final Assignment cColumnsAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final RuleCall cColumnsColumnParserRuleCall_6_2_0_0 = (RuleCall)cColumnsAssignment_6_2_0.eContents().get(0);
		private final Group cGroup_6_2_1 = (Group)cGroup_6_2.eContents().get(1);
		private final Keyword cCommaKeyword_6_2_1_0 = (Keyword)cGroup_6_2_1.eContents().get(0);
		private final Assignment cColumnsAssignment_6_2_1_1 = (Assignment)cGroup_6_2_1.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_6_2_1_1_0 = (RuleCall)cColumnsAssignment_6_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Table:
		//	"table" elementID=ID label=STRING "handles" association=[Association|QualifiedName] "{" (link+=Link ("," link+=Link)*
		//	| (link+=Link ",")+ (columns+=Column ("," columns+=Column)*) | (columns+=Column ("," columns+=Column)*)?) "}";
		@Override public ParserRule getRule() { return rule; }

		//"table" elementID=ID label=STRING "handles" association=[Association|QualifiedName] "{" (link+=Link ("," link+=Link)* |
		//(link+=Link ",")+ (columns+=Column ("," columns+=Column)*) | (columns+=Column ("," columns+=Column)*)?) "}"
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//"handles"
		public Keyword getHandlesKeyword_3() { return cHandlesKeyword_3; }

		//association=[Association|QualifiedName]
		public Assignment getAssociationAssignment_4() { return cAssociationAssignment_4; }

		//[Association|QualifiedName]
		public CrossReference getAssociationAssociationCrossReference_4_0() { return cAssociationAssociationCrossReference_4_0; }

		//QualifiedName
		public RuleCall getAssociationAssociationQualifiedNameParserRuleCall_4_0_1() { return cAssociationAssociationQualifiedNameParserRuleCall_4_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//link+=Link ("," link+=Link)* | (link+=Link ",")+ (columns+=Column ("," columns+=Column)*) | (columns+=Column (","
		//columns+=Column)*)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//link+=Link ("," link+=Link)*
		public Group getGroup_6_0() { return cGroup_6_0; }

		//link+=Link
		public Assignment getLinkAssignment_6_0_0() { return cLinkAssignment_6_0_0; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_6_0_0_0() { return cLinkLinkParserRuleCall_6_0_0_0; }

		//("," link+=Link)*
		public Group getGroup_6_0_1() { return cGroup_6_0_1; }

		//","
		public Keyword getCommaKeyword_6_0_1_0() { return cCommaKeyword_6_0_1_0; }

		//link+=Link
		public Assignment getLinkAssignment_6_0_1_1() { return cLinkAssignment_6_0_1_1; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_6_0_1_1_0() { return cLinkLinkParserRuleCall_6_0_1_1_0; }

		//(link+=Link ",")+ (columns+=Column ("," columns+=Column)*)
		public Group getGroup_6_1() { return cGroup_6_1; }

		//(link+=Link ",")+
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//link+=Link
		public Assignment getLinkAssignment_6_1_0_0() { return cLinkAssignment_6_1_0_0; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_6_1_0_0_0() { return cLinkLinkParserRuleCall_6_1_0_0_0; }

		//","
		public Keyword getCommaKeyword_6_1_0_1() { return cCommaKeyword_6_1_0_1; }

		//columns+=Column ("," columns+=Column)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//columns+=Column
		public Assignment getColumnsAssignment_6_1_1_0() { return cColumnsAssignment_6_1_1_0; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_6_1_1_0_0() { return cColumnsColumnParserRuleCall_6_1_1_0_0; }

		//("," columns+=Column)*
		public Group getGroup_6_1_1_1() { return cGroup_6_1_1_1; }

		//","
		public Keyword getCommaKeyword_6_1_1_1_0() { return cCommaKeyword_6_1_1_1_0; }

		//columns+=Column
		public Assignment getColumnsAssignment_6_1_1_1_1() { return cColumnsAssignment_6_1_1_1_1; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_6_1_1_1_1_0() { return cColumnsColumnParserRuleCall_6_1_1_1_1_0; }

		//(columns+=Column ("," columns+=Column)*)?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//columns+=Column
		public Assignment getColumnsAssignment_6_2_0() { return cColumnsAssignment_6_2_0; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_6_2_0_0() { return cColumnsColumnParserRuleCall_6_2_0_0; }

		//("," columns+=Column)*
		public Group getGroup_6_2_1() { return cGroup_6_2_1; }

		//","
		public Keyword getCommaKeyword_6_2_1_0() { return cCommaKeyword_6_2_1_0; }

		//columns+=Column
		public Assignment getColumnsAssignment_6_2_1_1() { return cColumnsAssignment_6_2_1_1; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_6_2_1_1_0() { return cColumnsColumnParserRuleCall_6_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class PropertyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColumnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSelectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateTimePickerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PropertyElement:
		//	Column | Text | Selection | DateTimePicker;
		@Override public ParserRule getRule() { return rule; }

		//Column | Text | Selection | DateTimePicker
		public Alternatives getAlternatives() { return cAlternatives; }

		//Column
		public RuleCall getColumnParserRuleCall_0() { return cColumnParserRuleCall_0; }

		//Text
		public RuleCall getTextParserRuleCall_1() { return cTextParserRuleCall_1; }

		//Selection
		public RuleCall getSelectionParserRuleCall_2() { return cSelectionParserRuleCall_2; }

		//DateTimePicker
		public RuleCall getDateTimePickerParserRuleCall_3() { return cDateTimePickerParserRuleCall_3; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cHandlesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyPropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyPropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cPropertyPropertyCrossReference_4_0.eContents().get(1);
		
		//Column:
		//	"column" elementID=ID label=STRING "handles" property=[Property|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"column" elementID=ID label=STRING "handles" property=[Property|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"column"
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//"handles"
		public Keyword getHandlesKeyword_3() { return cHandlesKeyword_3; }

		//property=[Property|QualifiedName]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[Property|QualifiedName]
		public CrossReference getPropertyPropertyCrossReference_4_0() { return cPropertyPropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getPropertyPropertyQualifiedNameParserRuleCall_4_0_1() { return cPropertyPropertyQualifiedNameParserRuleCall_4_0_1; }
	}

	public class DateTimePickerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateTimePicker");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDateTimePickerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFormatKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFormatAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFormatSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cFormatAssignment_3_1.eContents().get(0);
		private final Keyword cHandlesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cPropertyPropertyCrossReference_5_0 = (CrossReference)cPropertyAssignment_5.eContents().get(0);
		private final RuleCall cPropertyPropertyQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cPropertyPropertyCrossReference_5_0.eContents().get(1);
		
		//DateTimePicker:
		//	"date-time-picker" elementID=ID label=STRING ("format" format=STRING)? "handles" property=[Property|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"date-time-picker" elementID=ID label=STRING ("format" format=STRING)? "handles" property=[Property|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"date-time-picker"
		public Keyword getDateTimePickerKeyword_0() { return cDateTimePickerKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//("format" format=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"format"
		public Keyword getFormatKeyword_3_0() { return cFormatKeyword_3_0; }

		//format=STRING
		public Assignment getFormatAssignment_3_1() { return cFormatAssignment_3_1; }

		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_3_1_0() { return cFormatSTRINGTerminalRuleCall_3_1_0; }

		//"handles"
		public Keyword getHandlesKeyword_4() { return cHandlesKeyword_4; }

		//property=[Property|QualifiedName]
		public Assignment getPropertyAssignment_5() { return cPropertyAssignment_5; }

		//[Property|QualifiedName]
		public CrossReference getPropertyPropertyCrossReference_5_0() { return cPropertyPropertyCrossReference_5_0; }

		//QualifiedName
		public RuleCall getPropertyPropertyQualifiedNameParserRuleCall_5_0_1() { return cPropertyPropertyQualifiedNameParserRuleCall_5_0_1; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLongAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLongLongKeyword_0_0 = (Keyword)cLongAssignment_0.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementIDAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementIDIDTerminalRuleCall_2_0 = (RuleCall)cElementIDAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFormatKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFormatAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFormatSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cFormatAssignment_4_1.eContents().get(0);
		private final Keyword cHandlesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cPropertyPropertyCrossReference_6_0 = (CrossReference)cPropertyAssignment_6.eContents().get(0);
		private final RuleCall cPropertyPropertyQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cPropertyPropertyCrossReference_6_0.eContents().get(1);
		
		//Text:
		//	long?="long"? "text" elementID=ID label=STRING ("format" format=STRING)? "handles" property=[Property|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//long?="long"? "text" elementID=ID label=STRING ("format" format=STRING)? "handles" property=[Property|QualifiedName]
		public Group getGroup() { return cGroup; }

		//long?="long"?
		public Assignment getLongAssignment_0() { return cLongAssignment_0; }

		//"long"
		public Keyword getLongLongKeyword_0_0() { return cLongLongKeyword_0_0; }

		//"text"
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }

		//elementID=ID
		public Assignment getElementIDAssignment_2() { return cElementIDAssignment_2; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_2_0() { return cElementIDIDTerminalRuleCall_2_0; }

		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//("format" format=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"format"
		public Keyword getFormatKeyword_4_0() { return cFormatKeyword_4_0; }

		//format=STRING
		public Assignment getFormatAssignment_4_1() { return cFormatAssignment_4_1; }

		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_4_1_0() { return cFormatSTRINGTerminalRuleCall_4_1_0; }

		//"handles"
		public Keyword getHandlesKeyword_5() { return cHandlesKeyword_5; }

		//property=[Property|QualifiedName]
		public Assignment getPropertyAssignment_6() { return cPropertyAssignment_6; }

		//[Property|QualifiedName]
		public CrossReference getPropertyPropertyCrossReference_6_0() { return cPropertyPropertyCrossReference_6_0; }

		//QualifiedName
		public RuleCall getPropertyPropertyQualifiedNameParserRuleCall_6_0_1() { return cPropertyPropertyQualifiedNameParserRuleCall_6_0_1; }
	}

	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementIDIDTerminalRuleCall_1_0 = (RuleCall)cElementIDAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cHandlesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyPropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyPropertyQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cPropertyPropertyCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cSelectionItemsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cSelectionItemsSelectionItemParserRuleCall_6_0_0 = (RuleCall)cSelectionItemsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cSelectionItemsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cSelectionItemsSelectionItemParserRuleCall_6_1_1_0 = (RuleCall)cSelectionItemsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Selection:
		//	"selection" elementID=ID label=STRING "handles" property=[Property|QualifiedName] "{" (selectionItems+=SelectionItem
		//	("," selectionItems+=SelectionItem)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"selection" elementID=ID label=STRING "handles" property=[Property|QualifiedName] "{" (selectionItems+=SelectionItem
		//("," selectionItems+=SelectionItem)*)? "}"
		public Group getGroup() { return cGroup; }

		//"selection"
		public Keyword getSelectionKeyword_0() { return cSelectionKeyword_0; }

		//elementID=ID
		public Assignment getElementIDAssignment_1() { return cElementIDAssignment_1; }

		//ID
		public RuleCall getElementIDIDTerminalRuleCall_1_0() { return cElementIDIDTerminalRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//"handles"
		public Keyword getHandlesKeyword_3() { return cHandlesKeyword_3; }

		//property=[Property|QualifiedName]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[Property|QualifiedName]
		public CrossReference getPropertyPropertyCrossReference_4_0() { return cPropertyPropertyCrossReference_4_0; }

		//QualifiedName
		public RuleCall getPropertyPropertyQualifiedNameParserRuleCall_4_0_1() { return cPropertyPropertyQualifiedNameParserRuleCall_4_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(selectionItems+=SelectionItem ("," selectionItems+=SelectionItem)*)?
		public Group getGroup_6() { return cGroup_6; }

		//selectionItems+=SelectionItem
		public Assignment getSelectionItemsAssignment_6_0() { return cSelectionItemsAssignment_6_0; }

		//SelectionItem
		public RuleCall getSelectionItemsSelectionItemParserRuleCall_6_0_0() { return cSelectionItemsSelectionItemParserRuleCall_6_0_0; }

		//("," selectionItems+=SelectionItem)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//selectionItems+=SelectionItem
		public Assignment getSelectionItemsAssignment_6_1_1() { return cSelectionItemsAssignment_6_1_1; }

		//SelectionItem
		public RuleCall getSelectionItemsSelectionItemParserRuleCall_6_1_1_0() { return cSelectionItemsSelectionItemParserRuleCall_6_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SelectionItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SelectionItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationLiteralItemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSelectionItemKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//SelectionItem:
		//	EnumerationLiteralItem | "selection-item" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//EnumerationLiteralItem | "selection-item" value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumerationLiteralItem
		public RuleCall getEnumerationLiteralItemParserRuleCall_0() { return cEnumerationLiteralItemParserRuleCall_0; }

		//"selection-item" value=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"selection-item"
		public Keyword getSelectionItemKeyword_1_0() { return cSelectionItemKeyword_1_0; }

		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
	}

	public class EnumerationLiteralItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteralItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumLiteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cHandlesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumerationLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEnumerationLiteralEnumerationLiteralCrossReference_3_0 = (CrossReference)cEnumerationLiteralAssignment_3.eContents().get(0);
		private final RuleCall cEnumerationLiteralEnumerationLiteralQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cEnumerationLiteralEnumerationLiteralCrossReference_3_0.eContents().get(1);
		
		//EnumerationLiteralItem:
		//	"enum-literal" value=STRING "handles" enumerationLiteral=[EnumerationLiteral|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"enum-literal" value=STRING "handles" enumerationLiteral=[EnumerationLiteral|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"enum-literal"
		public Keyword getEnumLiteralKeyword_0() { return cEnumLiteralKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//"handles"
		public Keyword getHandlesKeyword_2() { return cHandlesKeyword_2; }

		//enumerationLiteral=[EnumerationLiteral|QualifiedName]
		public Assignment getEnumerationLiteralAssignment_3() { return cEnumerationLiteralAssignment_3; }

		//[EnumerationLiteral|QualifiedName]
		public CrossReference getEnumerationLiteralEnumerationLiteralCrossReference_3_0() { return cEnumerationLiteralEnumerationLiteralCrossReference_3_0; }

		//QualifiedName
		public RuleCall getEnumerationLiteralEnumerationLiteralQualifiedNameParserRuleCall_3_0_1() { return cEnumerationLiteralEnumerationLiteralQualifiedNameParserRuleCall_3_0_1; }
	}

	public class LinkableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassIndexViewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAssociationElementParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cLinkAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_1_1_0 = (RuleCall)cLinkAssignment_1_1.eContents().get(0);
		
		//LinkableElement:
		//	ClassIndexView | AssociationElement link+=Link;
		@Override public ParserRule getRule() { return rule; }

		//ClassIndexView | AssociationElement link+=Link
		public Alternatives getAlternatives() { return cAlternatives; }

		//ClassIndexView
		public RuleCall getClassIndexViewParserRuleCall_0() { return cClassIndexViewParserRuleCall_0; }

		//AssociationElement link+=Link
		public Group getGroup_1() { return cGroup_1; }

		//AssociationElement
		public RuleCall getAssociationElementParserRuleCall_1_0() { return cAssociationElementParserRuleCall_1_0; }

		//link+=Link
		public Assignment getLinkAssignment_1_1() { return cLinkAssignment_1_1; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_1_1_0() { return cLinkLinkParserRuleCall_1_1_0; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Keyword cHandlesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetViewAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetViewClassOperationViewCrossReference_3_0 = (CrossReference)cTargetViewAssignment_3.eContents().get(0);
		private final RuleCall cTargetViewClassOperationViewQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTargetViewClassOperationViewCrossReference_3_0.eContents().get(1);
		
		//Link:
		//	"link" label=STRING "handles" targetView=[ClassOperationView|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"link" label=STRING "handles" targetView=[ClassOperationView|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//label=STRING
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }

		//"handles"
		public Keyword getHandlesKeyword_2() { return cHandlesKeyword_2; }

		//targetView=[ClassOperationView|QualifiedName]
		public Assignment getTargetViewAssignment_3() { return cTargetViewAssignment_3; }

		//[ClassOperationView|QualifiedName]
		public CrossReference getTargetViewClassOperationViewCrossReference_3_0() { return cTargetViewClassOperationViewCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTargetViewClassOperationViewQualifiedNameParserRuleCall_3_0_1() { return cTargetViewClassOperationViewQualifiedNameParserRuleCall_3_0_1; }
	}

	public class LayoutableElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LayoutableElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementGroupParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassOperationViewParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LayoutableElement:
		//	ElementGroup | ClassOperationView;
		@Override public ParserRule getRule() { return rule; }

		//ElementGroup | ClassOperationView
		public Alternatives getAlternatives() { return cAlternatives; }

		//ElementGroup
		public RuleCall getElementGroupParserRuleCall_0() { return cElementGroupParserRuleCall_0; }

		//ClassOperationView
		public RuleCall getClassOperationViewParserRuleCall_1() { return cClassOperationViewParserRuleCall_1; }
	}

	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Assignment cAlignmentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAlignmentLayoutStyleEnumRuleCall_0 = (RuleCall)cAlignmentAssignment.eContents().get(0);
		
		//Layout:
		//	alignment=LayoutStyle;
		@Override public ParserRule getRule() { return rule; }

		//alignment=LayoutStyle
		public Assignment getAlignmentAssignment() { return cAlignmentAssignment; }

		//LayoutStyle
		public RuleCall getAlignmentLayoutStyleEnumRuleCall_0() { return cAlignmentLayoutStyleEnumRuleCall_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final RuleCall cVisibilityConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	VisibilityCondition;
		@Override public ParserRule getRule() { return rule; }

		//VisibilityCondition
		public RuleCall getVisibilityConditionParserRuleCall() { return cVisibilityConditionParserRuleCall; }
	}

	public class VisibilityConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VisibilityCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositeConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparisonConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VisibilityCondition:
		//	CompositeCondition | ComparisonCondition;
		@Override public ParserRule getRule() { return rule; }

		//CompositeCondition | ComparisonCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//CompositeCondition
		public RuleCall getCompositeConditionParserRuleCall_0() { return cCompositeConditionParserRuleCall_0; }

		//ComparisonCondition
		public RuleCall getComparisonConditionParserRuleCall_1() { return cComparisonConditionParserRuleCall_1; }
	}

	public class CompositeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionIDIDTerminalRuleCall_1_0 = (RuleCall)cConditionIDAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cComposedConditionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cComposedConditionsVisibilityConditionParserRuleCall_4_0_0 = (RuleCall)cComposedConditionsAssignment_4_0.eContents().get(0);
		private final Assignment cCompositionTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCompositionTypeCompositeConditionTypeEnumRuleCall_4_1_0 = (RuleCall)cCompositionTypeAssignment_4_1.eContents().get(0);
		private final Assignment cComposedConditionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cComposedConditionsVisibilityConditionParserRuleCall_4_2_0 = (RuleCall)cComposedConditionsAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cQuestionMarkKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeVisibilityConditionTypeEnumRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		
		//CompositeCondition:
		//	"composite-condition" conditionID=ID ":" "(" (composedConditions+=VisibilityCondition
		//	compositionType=CompositeConditionType composedConditions+=VisibilityCondition) ")" "?" type=VisibilityConditionType;
		@Override public ParserRule getRule() { return rule; }

		//"composite-condition" conditionID=ID ":" "(" (composedConditions+=VisibilityCondition
		//compositionType=CompositeConditionType composedConditions+=VisibilityCondition) ")" "?" type=VisibilityConditionType
		public Group getGroup() { return cGroup; }

		//"composite-condition"
		public Keyword getCompositeConditionKeyword_0() { return cCompositeConditionKeyword_0; }

		//conditionID=ID
		public Assignment getConditionIDAssignment_1() { return cConditionIDAssignment_1; }

		//ID
		public RuleCall getConditionIDIDTerminalRuleCall_1_0() { return cConditionIDIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//composedConditions+=VisibilityCondition compositionType=CompositeConditionType composedConditions+=VisibilityCondition
		public Group getGroup_4() { return cGroup_4; }

		//composedConditions+=VisibilityCondition
		public Assignment getComposedConditionsAssignment_4_0() { return cComposedConditionsAssignment_4_0; }

		//VisibilityCondition
		public RuleCall getComposedConditionsVisibilityConditionParserRuleCall_4_0_0() { return cComposedConditionsVisibilityConditionParserRuleCall_4_0_0; }

		//compositionType=CompositeConditionType
		public Assignment getCompositionTypeAssignment_4_1() { return cCompositionTypeAssignment_4_1; }

		//CompositeConditionType
		public RuleCall getCompositionTypeCompositeConditionTypeEnumRuleCall_4_1_0() { return cCompositionTypeCompositeConditionTypeEnumRuleCall_4_1_0; }

		//composedConditions+=VisibilityCondition
		public Assignment getComposedConditionsAssignment_4_2() { return cComposedConditionsAssignment_4_2; }

		//VisibilityCondition
		public RuleCall getComposedConditionsVisibilityConditionParserRuleCall_4_2_0() { return cComposedConditionsVisibilityConditionParserRuleCall_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"?"
		public Keyword getQuestionMarkKeyword_6() { return cQuestionMarkKeyword_6; }

		//type=VisibilityConditionType
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//VisibilityConditionType
		public RuleCall getTypeVisibilityConditionTypeEnumRuleCall_7_0() { return cTypeVisibilityConditionTypeEnumRuleCall_7_0; }
	}

	public class ComparisonConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComparisonConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionIDAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionIDIDTerminalRuleCall_1_0 = (RuleCall)cConditionIDAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPropertyPropertyElementCrossReference_3_0 = (CrossReference)cPropertyAssignment_3.eContents().get(0);
		private final RuleCall cPropertyPropertyElementIDTerminalRuleCall_3_0_1 = (RuleCall)cPropertyPropertyElementCrossReference_3_0.eContents().get(1);
		private final Assignment cComparisonTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComparisonTypeComparisonConditionTypeEnumRuleCall_4_0 = (RuleCall)cComparisonTypeAssignment_4.eContents().get(0);
		private final Assignment cComparisonValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComparisonValueSTRINGTerminalRuleCall_5_0 = (RuleCall)cComparisonValueAssignment_5.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeVisibilityConditionTypeEnumRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		
		//ComparisonCondition:
		//	"comparison-condition" conditionID=ID ":" property=[PropertyElement] comparisonType=ComparisonConditionType
		//	comparisonValue=STRING "?" type=VisibilityConditionType;
		@Override public ParserRule getRule() { return rule; }

		//"comparison-condition" conditionID=ID ":" property=[PropertyElement] comparisonType=ComparisonConditionType
		//comparisonValue=STRING "?" type=VisibilityConditionType
		public Group getGroup() { return cGroup; }

		//"comparison-condition"
		public Keyword getComparisonConditionKeyword_0() { return cComparisonConditionKeyword_0; }

		//conditionID=ID
		public Assignment getConditionIDAssignment_1() { return cConditionIDAssignment_1; }

		//ID
		public RuleCall getConditionIDIDTerminalRuleCall_1_0() { return cConditionIDIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//property=[PropertyElement]
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }

		//[PropertyElement]
		public CrossReference getPropertyPropertyElementCrossReference_3_0() { return cPropertyPropertyElementCrossReference_3_0; }

		//ID
		public RuleCall getPropertyPropertyElementIDTerminalRuleCall_3_0_1() { return cPropertyPropertyElementIDTerminalRuleCall_3_0_1; }

		//comparisonType=ComparisonConditionType
		public Assignment getComparisonTypeAssignment_4() { return cComparisonTypeAssignment_4; }

		//ComparisonConditionType
		public RuleCall getComparisonTypeComparisonConditionTypeEnumRuleCall_4_0() { return cComparisonTypeComparisonConditionTypeEnumRuleCall_4_0; }

		//comparisonValue=STRING
		public Assignment getComparisonValueAssignment_5() { return cComparisonValueAssignment_5; }

		//STRING
		public RuleCall getComparisonValueSTRINGTerminalRuleCall_5_0() { return cComparisonValueSTRINGTerminalRuleCall_5_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_6() { return cQuestionMarkKeyword_6; }

		//type=VisibilityConditionType
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//VisibilityConditionType
		public RuleCall getTypeVisibilityConditionTypeEnumRuleCall_7_0() { return cTypeVisibilityConditionTypeEnumRuleCall_7_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class LayoutStyleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LayoutStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVerticalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVerticalVerticalKeyword_0_0 = (Keyword)cVerticalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHorizontalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHorizontalHorizontalKeyword_1_0 = (Keyword)cHorizontalEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LayoutStyle:
		//	Vertical="vertical" | Horizontal="horizontal";
		public EnumRule getRule() { return rule; }

		//Vertical="vertical" | Horizontal="horizontal"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Vertical="vertical"
		public EnumLiteralDeclaration getVerticalEnumLiteralDeclaration_0() { return cVerticalEnumLiteralDeclaration_0; }

		//"vertical"
		public Keyword getVerticalVerticalKeyword_0_0() { return cVerticalVerticalKeyword_0_0; }

		//Horizontal="horizontal"
		public EnumLiteralDeclaration getHorizontalEnumLiteralDeclaration_1() { return cHorizontalEnumLiteralDeclaration_1; }

		//"horizontal"
		public Keyword getHorizontalHorizontalKeyword_1_0() { return cHorizontalHorizontalKeyword_1_0; }
	}

	public class VisibilityConditionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VisibilityConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHideEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHideHideKeyword_0_0 = (Keyword)cHideEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cShowEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cShowShowKeyword_1_0 = (Keyword)cShowEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEnableEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEnableEnableKeyword_2_0 = (Keyword)cEnableEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDisableEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDisableDisableKeyword_3_0 = (Keyword)cDisableEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityConditionType:
		//	Hide | Show | Enable | Disable;
		public EnumRule getRule() { return rule; }

		//Hide | Show | Enable | Disable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Hide
		public EnumLiteralDeclaration getHideEnumLiteralDeclaration_0() { return cHideEnumLiteralDeclaration_0; }

		//"Hide"
		public Keyword getHideHideKeyword_0_0() { return cHideHideKeyword_0_0; }

		//Show
		public EnumLiteralDeclaration getShowEnumLiteralDeclaration_1() { return cShowEnumLiteralDeclaration_1; }

		//"Show"
		public Keyword getShowShowKeyword_1_0() { return cShowShowKeyword_1_0; }

		//Enable
		public EnumLiteralDeclaration getEnableEnumLiteralDeclaration_2() { return cEnableEnumLiteralDeclaration_2; }

		//"Enable"
		public Keyword getEnableEnableKeyword_2_0() { return cEnableEnableKeyword_2_0; }

		//Disable
		public EnumLiteralDeclaration getDisableEnumLiteralDeclaration_3() { return cDisableEnumLiteralDeclaration_3; }

		//"Disable"
		public Keyword getDisableDisableKeyword_3_0() { return cDisableDisableKeyword_3_0; }
	}

	public class CompositeConditionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAmpersandAmpersandKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompositeConditionType:
		//	And="&&" | Or="||";
		public EnumRule getRule() { return rule; }

		//And="&&" | Or="||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//And="&&"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"&&"
		public Keyword getAndAmpersandAmpersandKeyword_0_0() { return cAndAmpersandAmpersandKeyword_0_0; }

		//Or="||"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"||"
		public Keyword getOrVerticalLineVerticalLineKeyword_1_0() { return cOrVerticalLineVerticalLineKeyword_1_0; }
	}

	public class ComparisonConditionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessLessThanSignKeyword_1_0 = (Keyword)cLessEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGreaterGreaterThanSignKeyword_2_0 = (Keyword)cGreaterEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ComparisonConditionType:
		//	Equal="==" | Less="<" | Greater=">";
		public EnumRule getRule() { return rule; }

		//Equal="==" | Less="<" | Greater=">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equal="=="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEqualEqualsSignEqualsSignKeyword_0_0() { return cEqualEqualsSignEqualsSignKeyword_0_0; }

		//Less="<"
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_1() { return cLessEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLessLessThanSignKeyword_1_0() { return cLessLessThanSignKeyword_1_0; }

		//Greater=">"
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_2() { return cGreaterEnumLiteralDeclaration_2; }

		//">"
		public Keyword getGreaterGreaterThanSignKeyword_2_0() { return cGreaterGreaterThanSignKeyword_2_0; }
	}
	
	private final ViewModelElements pViewModel;
	private final ViewGroupElements pViewGroup;
	private final ViewElements pView;
	private final ClassIndexViewElements pClassIndexView;
	private final ClassOperationViewElements pClassOperationView;
	private final CreateViewElements pCreateView;
	private final ReadViewElements pReadView;
	private final UpdateViewElements pUpdateView;
	private final DeleteViewElements pDeleteView;
	private final ConditionalElementElements pConditionalElement;
	private final ElementGroupElements pElementGroup;
	private final ViewElementElements pViewElement;
	private final AssociationElementElements pAssociationElement;
	private final ListElements pList;
	private final TableElements pTable;
	private final PropertyElementElements pPropertyElement;
	private final ColumnElements pColumn;
	private final DateTimePickerElements pDateTimePicker;
	private final TextElements pText;
	private final SelectionElements pSelection;
	private final SelectionItemElements pSelectionItem;
	private final EnumerationLiteralItemElements pEnumerationLiteralItem;
	private final LinkableElementElements pLinkableElement;
	private final LinkElements pLink;
	private final LayoutableElementElements pLayoutableElement;
	private final LayoutElements pLayout;
	private final LayoutStyleElements unknownRuleLayoutStyle;
	private final ConditionElements pCondition;
	private final VisibilityConditionElements pVisibilityCondition;
	private final CompositeConditionElements pCompositeCondition;
	private final VisibilityConditionTypeElements unknownRuleVisibilityConditionType;
	private final CompositeConditionTypeElements unknownRuleCompositeConditionType;
	private final ComparisonConditionElements pComparisonCondition;
	private final ComparisonConditionTypeElements unknownRuleComparisonConditionType;
	private final EIntElements pEInt;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ViewGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pViewModel = new ViewModelElements();
		this.pViewGroup = new ViewGroupElements();
		this.pView = new ViewElements();
		this.pClassIndexView = new ClassIndexViewElements();
		this.pClassOperationView = new ClassOperationViewElements();
		this.pCreateView = new CreateViewElements();
		this.pReadView = new ReadViewElements();
		this.pUpdateView = new UpdateViewElements();
		this.pDeleteView = new DeleteViewElements();
		this.pConditionalElement = new ConditionalElementElements();
		this.pElementGroup = new ElementGroupElements();
		this.pViewElement = new ViewElementElements();
		this.pAssociationElement = new AssociationElementElements();
		this.pList = new ListElements();
		this.pTable = new TableElements();
		this.pPropertyElement = new PropertyElementElements();
		this.pColumn = new ColumnElements();
		this.pDateTimePicker = new DateTimePickerElements();
		this.pText = new TextElements();
		this.pSelection = new SelectionElements();
		this.pSelectionItem = new SelectionItemElements();
		this.pEnumerationLiteralItem = new EnumerationLiteralItemElements();
		this.pLinkableElement = new LinkableElementElements();
		this.pLink = new LinkElements();
		this.pLayoutableElement = new LayoutableElementElements();
		this.pLayout = new LayoutElements();
		this.unknownRuleLayoutStyle = new LayoutStyleElements();
		this.pCondition = new ConditionElements();
		this.pVisibilityCondition = new VisibilityConditionElements();
		this.pCompositeCondition = new CompositeConditionElements();
		this.unknownRuleVisibilityConditionType = new VisibilityConditionTypeElements();
		this.unknownRuleCompositeConditionType = new CompositeConditionTypeElements();
		this.pComparisonCondition = new ComparisonConditionElements();
		this.unknownRuleComparisonConditionType = new ComparisonConditionTypeElements();
		this.pEInt = new EIntElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.views.view.View".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Our grammar is implemented as follows
	//ViewModel:
	//	(viewGroups+=ViewGroup viewGroups+=ViewGroup*)?;
	public ViewModelElements getViewModelAccess() {
		return pViewModel;
	}
	
	public ParserRule getViewModelRule() {
		return getViewModelAccess().getRule();
	}

	//ViewGroup:
	//	welcomeViewGroup?="welcome"? "viewgroup" name=ID "{" (views+=View ("," views+=View)*)? "}";
	public ViewGroupElements getViewGroupAccess() {
		return pViewGroup;
	}
	
	public ParserRule getViewGroupRule() {
		return getViewGroupAccess().getRule();
	}

	//View:
	//	ClassIndexView | ClassOperationView;
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//ClassIndexView:
	//	startView?="start"? "index-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{" ("view-description"
	//	description=STRING)? (link+=Link ("," link+=Link)*)? "}";
	public ClassIndexViewElements getClassIndexViewAccess() {
		return pClassIndexView;
	}
	
	public ParserRule getClassIndexViewRule() {
		return getClassIndexViewAccess().getRule();
	}

	//ClassOperationView:
	//	CreateView | ReadView | UpdateView | DeleteView;
	public ClassOperationViewElements getClassOperationViewAccess() {
		return pClassOperationView;
	}
	
	public ParserRule getClassOperationViewRule() {
		return getClassOperationViewAccess().getRule();
	}

	//CreateView:
	//	layout=Layout startView?="start"? "create-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
	//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
	public CreateViewElements getCreateViewAccess() {
		return pCreateView;
	}
	
	public ParserRule getCreateViewRule() {
		return getCreateViewAccess().getRule();
	}

	//ReadView:
	//	layout=Layout startView?="start"? "read-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
	//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
	public ReadViewElements getReadViewAccess() {
		return pReadView;
	}
	
	public ParserRule getReadViewRule() {
		return getReadViewAccess().getRule();
	}

	//UpdateView:
	//	layout=Layout startView?="start"? "update-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
	//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
	public UpdateViewElements getUpdateViewAccess() {
		return pUpdateView;
	}
	
	public ParserRule getUpdateViewRule() {
		return getUpdateViewAccess().getRule();
	}

	//DeleteView:
	//	layout=Layout startView?="start"? "delete-view" name=ID header=STRING "handles" class=[Class|QualifiedName] "{"
	//	("view-description" description=STRING)? (elementGroups+=ElementGroup ("," elementGroups+=ElementGroup)*)? "}";
	public DeleteViewElements getDeleteViewAccess() {
		return pDeleteView;
	}
	
	public ParserRule getDeleteViewRule() {
		return getDeleteViewAccess().getRule();
	}

	////cp: ich glaub nicht das die in irgendeiner weise zieht
	////weils in keiner regel vorkommt. 
	//ConditionalElement:
	//	ElementGroup | ViewElement;
	public ConditionalElementElements getConditionalElementAccess() {
		return pConditionalElement;
	}
	
	public ParserRule getConditionalElementRule() {
		return getConditionalElementAccess().getRule();
	}

	//ElementGroup:
	//	layout=Layout "elementgroup" header=STRING "{" (viewElements+=ViewElement ("," viewElements+=ViewElement)*)? "}"
	//	("with" condition=Condition)?;
	public ElementGroupElements getElementGroupAccess() {
		return pElementGroup;
	}
	
	public ParserRule getElementGroupRule() {
		return getElementGroupAccess().getRule();
	}

	//ViewElement:
	//	(AssociationElement | PropertyElement) ("with" condition=Condition)?;
	public ViewElementElements getViewElementAccess() {
		return pViewElement;
	}
	
	public ParserRule getViewElementRule() {
		return getViewElementAccess().getRule();
	}

	//AssociationElement:
	//	Table | List;
	public AssociationElementElements getAssociationElementAccess() {
		return pAssociationElement;
	}
	
	public ParserRule getAssociationElementRule() {
		return getAssociationElementAccess().getRule();
	}

	//List:
	//	"list" elementID=ID label=STRING "handles" association=[Association|QualifiedName] "{" (link+=Link (","
	//	link+=Link)*)? "}";
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//Table:
	//	"table" elementID=ID label=STRING "handles" association=[Association|QualifiedName] "{" (link+=Link ("," link+=Link)*
	//	| (link+=Link ",")+ (columns+=Column ("," columns+=Column)*) | (columns+=Column ("," columns+=Column)*)?) "}";
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//PropertyElement:
	//	Column | Text | Selection | DateTimePicker;
	public PropertyElementElements getPropertyElementAccess() {
		return pPropertyElement;
	}
	
	public ParserRule getPropertyElementRule() {
		return getPropertyElementAccess().getRule();
	}

	//Column:
	//	"column" elementID=ID label=STRING "handles" property=[Property|QualifiedName];
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//DateTimePicker:
	//	"date-time-picker" elementID=ID label=STRING ("format" format=STRING)? "handles" property=[Property|QualifiedName];
	public DateTimePickerElements getDateTimePickerAccess() {
		return pDateTimePicker;
	}
	
	public ParserRule getDateTimePickerRule() {
		return getDateTimePickerAccess().getRule();
	}

	//Text:
	//	long?="long"? "text" elementID=ID label=STRING ("format" format=STRING)? "handles" property=[Property|QualifiedName];
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//Selection:
	//	"selection" elementID=ID label=STRING "handles" property=[Property|QualifiedName] "{" (selectionItems+=SelectionItem
	//	("," selectionItems+=SelectionItem)*)? "}";
	public SelectionElements getSelectionAccess() {
		return pSelection;
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}

	//SelectionItem:
	//	EnumerationLiteralItem | "selection-item" value=STRING;
	public SelectionItemElements getSelectionItemAccess() {
		return pSelectionItem;
	}
	
	public ParserRule getSelectionItemRule() {
		return getSelectionItemAccess().getRule();
	}

	//EnumerationLiteralItem:
	//	"enum-literal" value=STRING "handles" enumerationLiteral=[EnumerationLiteral|QualifiedName];
	public EnumerationLiteralItemElements getEnumerationLiteralItemAccess() {
		return pEnumerationLiteralItem;
	}
	
	public ParserRule getEnumerationLiteralItemRule() {
		return getEnumerationLiteralItemAccess().getRule();
	}

	//LinkableElement:
	//	ClassIndexView | AssociationElement link+=Link;
	public LinkableElementElements getLinkableElementAccess() {
		return pLinkableElement;
	}
	
	public ParserRule getLinkableElementRule() {
		return getLinkableElementAccess().getRule();
	}

	//Link:
	//	"link" label=STRING "handles" targetView=[ClassOperationView|QualifiedName];
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//LayoutableElement:
	//	ElementGroup | ClassOperationView;
	public LayoutableElementElements getLayoutableElementAccess() {
		return pLayoutableElement;
	}
	
	public ParserRule getLayoutableElementRule() {
		return getLayoutableElementAccess().getRule();
	}

	//Layout:
	//	alignment=LayoutStyle;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//enum LayoutStyle:
	//	Vertical="vertical" | Horizontal="horizontal";
	public LayoutStyleElements getLayoutStyleAccess() {
		return unknownRuleLayoutStyle;
	}
	
	public EnumRule getLayoutStyleRule() {
		return getLayoutStyleAccess().getRule();
	}

	//Condition:
	//	VisibilityCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//VisibilityCondition:
	//	CompositeCondition | ComparisonCondition;
	public VisibilityConditionElements getVisibilityConditionAccess() {
		return pVisibilityCondition;
	}
	
	public ParserRule getVisibilityConditionRule() {
		return getVisibilityConditionAccess().getRule();
	}

	//CompositeCondition:
	//	"composite-condition" conditionID=ID ":" "(" (composedConditions+=VisibilityCondition
	//	compositionType=CompositeConditionType composedConditions+=VisibilityCondition) ")" "?" type=VisibilityConditionType;
	public CompositeConditionElements getCompositeConditionAccess() {
		return pCompositeCondition;
	}
	
	public ParserRule getCompositeConditionRule() {
		return getCompositeConditionAccess().getRule();
	}

	//enum VisibilityConditionType:
	//	Hide | Show | Enable | Disable;
	public VisibilityConditionTypeElements getVisibilityConditionTypeAccess() {
		return unknownRuleVisibilityConditionType;
	}
	
	public EnumRule getVisibilityConditionTypeRule() {
		return getVisibilityConditionTypeAccess().getRule();
	}

	//enum CompositeConditionType:
	//	And="&&" | Or="||";
	public CompositeConditionTypeElements getCompositeConditionTypeAccess() {
		return unknownRuleCompositeConditionType;
	}
	
	public EnumRule getCompositeConditionTypeRule() {
		return getCompositeConditionTypeAccess().getRule();
	}

	//ComparisonCondition:
	//	"comparison-condition" conditionID=ID ":" property=[PropertyElement] comparisonType=ComparisonConditionType
	//	comparisonValue=STRING "?" type=VisibilityConditionType;
	public ComparisonConditionElements getComparisonConditionAccess() {
		return pComparisonCondition;
	}
	
	public ParserRule getComparisonConditionRule() {
		return getComparisonConditionAccess().getRule();
	}

	//enum ComparisonConditionType:
	//	Equal="==" | Less="<" | Greater=">";
	public ComparisonConditionTypeElements getComparisonConditionTypeAccess() {
		return unknownRuleComparisonConditionType;
	}
	
	public EnumRule getComparisonConditionTypeRule() {
		return getComparisonConditionTypeAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

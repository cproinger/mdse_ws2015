/*
 * generated by Xtext
 */
package at.ac.tuwien.big.views.view.scoping

import at.ac.tuwien.big.views.Class
import at.ac.tuwien.big.views.ClassOperationView
import at.ac.tuwien.big.views.Table
import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class ViewScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * A column of a table can only reference a property of the class that is the type of the
	 * navigable association end of the association that is referenced by the table. Again, the
	 * referenced property is either defined by the class that serves as type of the navigable
	 * association end or inherited from its super classes.
	 */
	def scope_PropertyElement_property(Table table, EReference ref) {
		if (table.association == null)
			return null;
		val clazz = table.association.associationEnds.filter[it.equals(table.association.navigableEnd)].get(0).
			type as Class;
		return propsOfClassAndSuperclasses(clazz);
	}
	
	/**
	 * A property element has to reference a property of the class that is referenced by the
	 * view containing the property element. The referenced property is either defined by the
	 * class that is references by the view or inherited by this class from its super classes.
	 */
	def scope_PropertyElement_property(ClassOperationView pe, EReference ref) {

		if (pe.class_.name == null)
			return null;
		var clazz = pe.class_;
		return propsOfClassAndSuperclasses(clazz);
	}
	
	/**
	 * retrieves all properties of the class and it's superclasses. 
	 */
	private def propsOfClassAndSuperclasses(Class clazz) {
		var Class c = clazz;
		val props = new BasicEList(c.properties);
		do {
			props.addAll(c.properties);
		} while ((c = c.superClass) != null)
		return Scopes.scopeFor(props)
	}
}

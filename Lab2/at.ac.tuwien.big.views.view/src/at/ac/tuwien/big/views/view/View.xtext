grammar at.ac.tuwien.big.views.view.View with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/views" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Our grammar is implemented as follows

ViewModel returns ViewModel:
(viewGroups+=ViewGroup (viewGroups+=ViewGroup)*)?;

ViewGroup returns ViewGroup:
(welcomeViewGroup?= 'welcome' )? 'viewgroup' name= ID '{'
	(views+=View (','views+=View)*)? 
'}' ;

View returns View:
	ClassIndexView | ClassOperationView ;

ClassIndexView returns ClassIndexView:
(startView?= 'start' )? 'index-view' name= ID header= STRING 'handles' class=[Class|QualifiedName] '{'
	('view-description' description= STRING)?
	 (link+=Link (',' link+=Link)*)? '}' ;

ClassOperationView returns ClassOperationView:
CreateView | ReadView | UpdateView | DeleteView
 ;

 CreateView returns CreateView:
 layout=Layout  (startView?= 'start' )? 'create-view' name= ID header= STRING 'handles' class=[Class|QualifiedName] '{'
	('view-description' description=STRING)?
	 (elementGroups+=ElementGroup (',' elementGroups+=ElementGroup)*)? 
	'}';

ReadView returns ReadView:
	layout=Layout  (startView?= 'start' )? 'read-view' name= ID header= STRING 'handles' class=[Class|QualifiedName] '{'
	('view-description' description= STRING)?
	 (elementGroups+=ElementGroup (',' elementGroups+=ElementGroup)*)? '}' ;

UpdateView returns UpdateView:	
	layout=Layout  (startView?= 'start' )? 'update-view' name= ID header= STRING 'handles' class=[Class|QualifiedName] '{'
	('view-description' description= STRING)?
	 (elementGroups+=ElementGroup (',' elementGroups+=ElementGroup)*)? '}';

DeleteView returns DeleteView:	
layout=Layout  (startView?= 'start' )? 'delete-view' name= ID header= STRING 'handles' class=[Class|QualifiedName] '{'
	('view-description' description= STRING)?
	 (elementGroups+=ElementGroup (',' elementGroups+=ElementGroup)*)?  '}' ;

ConditionalElement returns ConditionalElement:
	ElementGroup|ViewElement
	('with' condition=Condition )?
	 ;

  
ElementGroup returns ElementGroup:
	layout=Layout 'elementgroup' header= STRING '{'
	(viewElements+=ViewElement (','viewElements+=ViewElement)*)?
	 ('with' condition=Condition )? '}';

ViewElement returns ViewElement:
	AssociationElement | PropertyElement
	
	;

AssociationElement returns AssociationElement:
	Table |List	
	;

List returns List:
	'list' elementID=ID label=STRING 'handles' association= [Association|QualifiedName] '{' 
	(link+=Link (',' link+=Link)*)?
	'}' 
	;

Table returns Table:
	'table' elementID=ID label=STRING 'handles' association= [Association|QualifiedName] '{'
	((link+=Link (',' link+=Link)*)
	| (link+=Link ',')+ (columns+=Column (',' columns+=Column)*)
	| (columns+=Column (',' columns+=Column)*)?)
'}' ;

PropertyElement returns PropertyElement:
		Column |Text| Selection| DateTimePicker 
		 ;

Column returns Column:
	'column' elementID=ID label=STRING 'handles' property= [Property|QualifiedName];

DateTimePicker returns DateTimePicker :
	'date-time-picker' 	elementID=ID label=STRING format=STRING 'handles' property= [Property|QualifiedName];
	
Text returns Text:
	 (long?= 'long')?'text' elementID=ID label=STRING ('format' format=STRING)? 'handles' property= [Property|QualifiedName]
	  ;


Selection returns Selection:
	'selection' elementID=ID label=STRING 'handles' property= [Property|QualifiedName] '{'
	(selectionItems+=SelectionItem (',' selectionItems+=SelectionItem)*)?  '}' ;

SelectionItem returns SelectionItem:
	EnumerationLiteralItem
	|('selection-item' value=STRING) ;

EnumerationLiteralItem returns EnumerationLiteralItem:
	'enum-literal'  value=STRING 'handles' enumerationLiteral=[EnumerationLiteral|QualifiedName];

LinkableElement returns LinkableElement:
	ClassIndexView | AssociationElement
	link+=Link ;

Link returns Link:
	'link' label=STRING 'handles' targetView=[ClassOperationView|QualifiedName] ;

LayoutableElement returns LayoutableElement:
	ElementGroup| ClassOperationView ;

Layout returns Layout:
	alignment= LayoutStyle ;

enum LayoutStyle returns LayoutStyle:
	Vertical= 'vertical' | Horizontal= 'horizontal' ;
								

Condition returns Condition:
	VisibilityCondition ;

VisibilityCondition returns VisibilityCondition:
	CompositeCondition|ComparisonCondition ;

CompositeCondition returns CompositeCondition:
	'composite-condition' conditionID=ID ':' 
	'(' (composedConditions+=VisibilityCondition compositionType=CompositeConditionType ('||' 
		compositionType=CompositeConditionType composedConditions+=VisibilityCondition)*)? ')' '?' type= VisibilityConditionType ;
		
enum VisibilityConditionType returns VisibilityConditionType:
				Hide ='Hide' | Show = 'Show'  | Enable = 'Enable'  | Disable= 'Disable' ;

enum CompositeConditionType returns CompositeConditionType:
				And ='And'  | Or = 'Or';

ComparisonCondition returns ComparisonCondition:
	'comparison-condition' conditionID=ID  ':' 	property=[PropertyElement] comparisonType=ComparisonConditionType comparisonValue=STRING '?' type= VisibilityConditionType
;

enum ComparisonConditionType returns ComparisonConditionType:
				Equal = "==" | Less = '<' | Greater= '>' ;

EInt returns ecore::EInt:
	'-'? INT;

QualifiedName returns ecore::EString: 
	ID (=> '.'ID)*;
